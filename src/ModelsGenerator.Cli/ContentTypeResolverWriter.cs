using McMaster.Extensions.CommandLineUtils;
using System.Text;
using Contentful.Core.Models;

namespace Peereflits.Shared.Contentful.ModelsGenerator.Cli;

internal sealed class ContentTypeResolverWriter : ClassGeneratorBase
{
    private const string ClassName = "GeneratedContentTypeResolver";

    private readonly IConsole console;
    private readonly string outputDirectory;
    private readonly bool shouldOverWrite;
    private readonly string @namespace;
    private readonly bool isInternal;

    private readonly List<ContentType> contentTypes = new();

    public ContentTypeResolverWriter
    (
        IConsole console,
        string outputDirectory,
        bool shouldOverWrite,
        string @namespace,
        bool isInternal
    )
    {
        this.console = console;
        this.outputDirectory = outputDirectory;
        this.shouldOverWrite = shouldOverWrite;
        this.@namespace = @namespace;
        this.isInternal = isInternal;
    }

    public async Task WriteContentTypeResolver(IEnumerable<ContentType> contentfulTypes)
    {
        this.contentTypes.AddRange(contentfulTypes);

        var dir = new DirectoryInfo(outputDirectory);

        var file = new FileInfo(Path.Combine(dir.FullName, "GeneratedContentTypeResolver.g.cs"));
        if (file.Exists && !shouldOverWrite)
        {
            console.ForegroundColor = ConsoleColor.Yellow;
            var msg = $"The file '{file.Name}' already exists. Do you want to overwrite it?";
            bool isYes = Prompt.GetYesNo(msg, true);
            console.ResetColor();

            if (!isYes)
            {
                console.ForegroundColor = ConsoleColor.Red;
                console.WriteLine($"Skipping {file.Name}");
                console.ResetColor();
                return;
            }
        }

        console.WriteLine($"Generating file {file.Name}");
        await using var sw = file.CreateText();
        await sw.WriteAsync(GenerateClass(contentTypes));
    }

    private StringBuilder GenerateClass(IEnumerable<ContentType> contentTypes)
    {
        var sb = new StringBuilder();
        sb.AppendLine("// ===================================================================== //");
        sb.AppendLine("// == This file is generated by the Contentful.ModelsGenerator.Cli    == //");
        sb.AppendLine("// ===================================================================== //");
        sb.AppendLine("using Contentful.Core.Configuration;");
        sb.AppendLine();
        sb.AppendLine($"namespace {@namespace};");
        sb.AppendLine();

        //start class
        sb.AppendLine($"{(isInternal ? "internal" : "public")} partial class {ClassName} : IContentTypeResolver");
        sb.AppendLine("{");
        sb.AppendLine("    public Dictionary<string, Type> _types = new Dictionary<string, Type>()");
        sb.AppendLine("    {");

        foreach (var contentType in contentTypes)
        {
            var id = contentType.SystemProperties.Id;
            var className = FormatClassName(contentType.SystemProperties.Id);
            sb.AppendLine($"        [\"{id}\"] = typeof({className}),");
        }

        sb.AppendLine("    };");
        sb.AppendLine();

        sb.AppendLine("    public Type Resolve(string contentTypeId)");
        sb.AppendLine("    {");
        sb.AppendLine("        return _types.TryGetValue(contentTypeId, out var type) ? type : null;");
        sb.AppendLine("    }");

        sb.Append("}");
        return sb;
    }
}
